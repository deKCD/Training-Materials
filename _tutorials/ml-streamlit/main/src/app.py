import streamlit as st
import pandas as pd
import joblib
import numpy as np
from tabicl import TabICLClassifier # here import model you used for training
import torch

st.title("Biosynthetic Gene Cluster Inference")
st.subheader("Upload your protein sequences for prediction")

with st.sidebar:
    st.header("Input Data Requirements")
    st.caption("Upload your data for inference.")
    with st.expander("Supported Formats"):
        st.markdown("- FASTA")
    st.divider()
    
    st.header("Model Information")
    st.caption("This model predicts BGC class using protein embeddings")
    st.markdown("The model is a TabICL classifier trained on protein embeddings generated by `tattabio/gLM2_650M_embed`")
    st.markdown("- Input feature dimension: 512")
    
    st.divider()
    st.caption("<p style = 'text-align:center'>Developed by <a href='https://github.com/USERNAME'>YOUR_NAME</a></p>", unsafe_allow_html=True)

#if st.button("Upload FASTA"):
#    input_file = st.file_uploader("Choose FASTA file", type="fasta")

# initialize
if "upload_clicked" not in st.session_state:
    st.session_state.upload_clicked = {1: False}

# callback function to update click state
def mark_upload_clicked(button):
    st.session_state.upload_clicked[button] = True

# render button
st.button("Upload FASTA", on_click=mark_upload_clicked, args=[1])

uploaded_file = None
protein_sequence = None

if st.session_state.upload_clicked[1]:
    uploaded_file = st.file_uploader("Choose a FASTA file", type=["fasta", "fa"])
    
    # paste a single protein sequence
    st.markdown("---")
    st.markdown("Or paste a single protein sequence")
    protein_sequence = st.text_area(
        "Enter a protein sequence",    )

# import utils.py functions
from src.utils import parse_fasta, generate_embeddings, make_prediction

if uploaded_file and st.button("Predict"):
    query_sequences = parse_fasta(uploaded_file)
    with st.spinner("Generating embeddings..."):
        embeddings = generate_embeddings(query_sequences)
    with st.spinner("Making predictions..."):
        results = make_prediction(embeddings)
    st.dataframe(results)

    csv = results.to_csv().encode("utf-8")
    st.download_button(
        label="Download predictions",
        data=csv,
        file_name="results.csv",
        mime="text/csv"
)